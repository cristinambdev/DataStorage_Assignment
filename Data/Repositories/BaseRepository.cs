using Data.Contexts;
using Data.Entities;
using Data.Interfaces;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Storage;
using System.Diagnostics;
using System.Linq.Expressions;

namespace Data.Repositories;

public abstract class BaseRepository<TEntity>(DataContext context) : IBaseRepository<TEntity> where TEntity : class
{
    protected readonly DataContext _context = context;
    protected readonly DbSet<TEntity> _dbSet = context.Set<TEntity>();
    private IDbContextTransaction _transaction = null!;


    #region Transaction Management

    public virtual async Task BeginTransactionAsync()
    {
        _transaction ??= await _context.Database.BeginTransactionAsync();
    }

    public virtual async Task CommitTransactionAsync()
    {
        if (_transaction != null)
        {
           
            await _transaction.CommitAsync();
           
            await _transaction.DisposeAsync();
            _transaction = null!;

        }

    }

    public virtual async Task RollbackTransactionAsync()
    {
        if (_transaction != null)
        {
            await _transaction.RollbackAsync();
            await _transaction.DisposeAsync();
            _transaction = null!;

        }
    }

    #endregion


    #region CRUD
    //CREATE
    public virtual async Task CreateAsync(TEntity entity)
    {
        try
        {
            await _dbSet.AddAsync(entity);
            await _context.SaveChangesAsync();
        }

        catch (Exception ex) 
        {
            Debug.WriteLine($"❌ Error in CreateAsync: {ex.Message}");
        }
        

    }

    //READ
    public virtual async Task<IEnumerable<TEntity>> GetAllAsync(Func<IQueryable<TEntity>, IQueryable<TEntity>>? includeExpression = null)
    {
        try
        {
            IQueryable<TEntity> query = _dbSet;

            if (includeExpression != null)
                query = includeExpression(query);

            return await query.ToListAsync();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            return null!;
        }
      

    }

    //READ
    public virtual async Task<TEntity?> GetAsync(Expression<Func<TEntity, bool>> predicate, Func<IQueryable<TEntity>, IQueryable<TEntity>>? includeExpression = null)
    {
        try
        {
            IQueryable<TEntity> query = _dbSet;
            if (includeExpression != null)
                query = includeExpression(query);

            return await query.FirstOrDefaultAsync(predicate);
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            return null!;
        }
        
    }

  
    //UPDATE
    public virtual async Task <bool> UpdateAsync(TEntity entity) 
    {
        try
        {
            var idProperty = typeof(TEntity).GetProperty("Id");

            if (idProperty == null)
            {
                throw new InvalidOperationException("The entity does not contain an 'Id' property.");
            }

            var entityId = idProperty.GetValue(entity);
            if (entityId == null)
            {
                throw new InvalidOperationException("The 'Id' property cannot be null.");
            }

            // Ensure the entity is being tracked
            var trackedEntity = await _context.Set<TEntity>().FindAsync(entityId);
            if (trackedEntity == null)
            {
                // If not found, attach the entity
                _context.Set<TEntity>().Attach(entity);
            }

            // Mark entity as modified
            _context.Entry(entity).State = EntityState.Modified;

            // Save changes
            var changes = await _context.SaveChangesAsync();
            return changes > 0;
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error during update: {ex.Message}");
            return false;
        }
    }

    //try
    //{
    //    _dbSet.Update(entity);
    //    var changes = await _context.SaveChangesAsync();
    //    return changes > 0; // code generated by Chat GPT

    //}
    //catch (Exception ex)
    //{
    //    Debug.WriteLine(ex);
    //    return false;

    //}



    //DELETE
    public virtual async Task <bool> DeleteAsync(TEntity entity)
    {
        try
        {
            _dbSet.Remove(entity);
           var changes = await _context.SaveChangesAsync();
            return changes > 0;

        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            return false;
        }

    }

    public virtual async Task<bool> AlreadyExistsAsync(Expression<Func<TEntity, bool>> expression)
    {
        try
        {
            return await _dbSet.AnyAsync(expression);
            

        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            return false;
        }
       
    }

    public virtual async Task<bool> SaveAsync()
    {

        try
        {
            var changes = await _context.SaveChangesAsync();
            return changes > 0;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving changes: {ex.Message}");
            return false;
        }
    }
    #endregion

}
