using Business.Dtos;
using Business.Factories;
using Business.Interfaces;
using Business.Models;
using Business.Services;
using Data.Entities;
using Data.Interfaces;
using Microsoft.EntityFrameworkCore.Query.Internal;
using Microsoft.Identity.Client;
using System;
using System.Diagnostics;

namespace Presentation.Dialogs;

public class MenuDialogs( IProjectService projectService, IProjectRepository projectRepository) : IMenuDialogs
{
    private readonly IProjectService _projectService = projectService;
    private readonly IProjectRepository _projectRepository = projectRepository;

    public async Task CreateProjectOption()
    {
        try
        {
            var project = new ProjectRegistrationForm
            {
                Status = new StatusTypeRegistrationForm(),  
                User = new UserRegistrationForm(),         
                Customer = new CustomerRegistrationForm(), 
                Product = new ProductRegistrationForm()    
            }; // code by chat GPT to avoid null reference

            Console.Clear();
            Console.WriteLine("#### CREATE PROJECT ####");

            Console.Write("Title: ");
            project.Title = Console.ReadLine()!;
            Console.Write("Description: ");
            project.Description = Console.ReadLine()!;

            Console.Write("Start Date (yyyy-mm-dd): ");
            project.StartDate = DateTime.Parse(Console.ReadLine()!); //generated by Chat GPT
            Console.Write("End Date(yyyy-mm-dd): ");
            project.EndDate = DateTime.Parse(Console.ReadLine()!); //generated by Chat GPT

            Console.Write("Status(Not Started, Ongoing, or Completed): ");
            var status = project.Status.Status;
            status = Console.ReadLine()!.Trim().ToLower();

                if (status == "not started" || status == "ongoing" || status == "completed")
                {
                    project.Status.Status = status;
                      
                }
                else
                {
                    Console.WriteLine("Invalid status entered. Please enter a valid status.");
                    return;
                }           
            

            Console.Write("Project Manager(First Name): ");
            project.User.FirstName = Console.ReadLine()!;
            Console.Write("Project Manager(Last Name): ");
            project.User.LastName = Console.ReadLine()!;
            Console.Write("Customer: ");
            project.Customer.CustomerName = Console.ReadLine()!;

            Console.Write("Service: ");
            project.Product.ProductName = Console.ReadLine()!;
            Console.Write("Price: ");
            var priceInput = Console.ReadLine()!;

            // generated by Chat GPT. Remove the non-numeric characters (commas and currency symbols)
            var cleanedPrice = new string(priceInput.Where(c => char.IsDigit(c) || c == '.').ToArray());
            project.Product.Price = decimal.Parse(cleanedPrice);

  

            var result = await _projectService.CreateProjectAsync(project);
            await _projectRepository.SaveAsync();
            
            if (result.Success)// generated by Chat GPT
                Console.WriteLine("\nProject was created successfully.");

            else
                Console.WriteLine("\nProject was not created. Error: " + result.ErrorMessage);
        }

        catch (Exception ex)
        {

            Debug.WriteLine(ex.Message);
        }

        

        Console.ReadKey();
    }

    public async Task ViewAllProjectsOption()
    {
        Console.Clear();
        Console.WriteLine("### VIEW ALL PROJECTS ###");
        Console.WriteLine();

        var result = await _projectService.GetAllProjectsAsync();

        if (!result.Success)
        {
            Console.WriteLine("No projects were found");

            Console.ReadKey();
            return;
        }
        // Extract projects from result. Code by chat GPT
        var projects = ((Result<IEnumerable<Project>>)result).Data;
        
        if (projects == null || !projects.Any()) //code by chat gpt
        {
            Console.WriteLine("ERROR: Projects list is empty.");
            Console.ReadKey();
            return;
        }
        foreach (var project in projects)
        {
            Console.WriteLine($"Id:{project!.Id},  Title: {project.Title}, Duration: {project.StartDate} - {project.EndDate}, Status: {project.Status}");

            Console.WriteLine();
            Console.WriteLine();
        }
        Console.ReadKey();
    }

    public async Task ViewProjectOption()
    {
        Console.Clear();
        Console.WriteLine("### VIEW PROJECT ###");
        Console.WriteLine();

        Console.Write("Project Title: ");
        Console.WriteLine();

        var title = Console.ReadLine()!;

            if (string.IsNullOrWhiteSpace(title))
            {
                Console.WriteLine("Please enter a project title");
                Console.ReadKey();
                return;
            }

            var result = await _projectService.GetProjectAsync(p => p.Title == title); 

            if (!result.Success)
            {
                Console.WriteLine("Project not found");
            }
            else
            {
                var project = ((Result<Project>)result).Data; // code by Chat GPT to collect all projects with same dara
                Console.WriteLine($"ID: {project!.Id},  TITLE:{project.Title}, DURATION: {project.StartDate} - {project.EndDate}, STATUS: {project.Status}");

        }

            Console.ReadKey();
        
    }

    public async Task UpdateProjectOption()
    {
        Console.Clear();
        Console.WriteLine("### UPDATE PROJECT ### ");

        Console.Write("Project Title: ");

        var selectedTitle = Console.ReadLine()!;
        if (string.IsNullOrWhiteSpace(selectedTitle))
        {
            Console.WriteLine("Please enter a project title");
            Console.ReadKey();
            return;
        }

        var project = await _projectService.GetProjectAsync(p => p.Title == selectedTitle);

        if (project is Result<Project> projectResult) //Chat GPT
        {
            var result = projectResult.Data;

            if (result == null)
            {
                Console.WriteLine("Error: Project data is null.");
                Console.ReadKey();
                return;
            }

            //Display current project details
            Console.WriteLine($"ID: {result.Id}");
            Console.WriteLine($"Title: {result.Title}");
            Console.WriteLine($"Description: {result.Description}");
            Console.WriteLine($"Time Period: {result.StartDate} - {result.EndDate}");
            Console.WriteLine($"Status (Not Started, Ongoing, Finished): {result.Status}");
            Console.WriteLine($"Project Manager: {result.UserFirstName} {result.UserLastName}");
            Console.WriteLine($"Customer: {result.Customer}");
            Console.WriteLine($"Product: {result.ProductName}");
            Console.WriteLine($"Price: {result.ProductPrice}");
            Console.WriteLine("-----------------------------------");

            //create an update form
            var projectUpdateForm = ProjectFactory.CreateUpdateForm();
            projectUpdateForm.Id = result.Id;

            Console.WriteLine("Enter new values(leave blank to keep current value): ");


            // Collect user input for fields, only update non-empty inputs
            Console.Write("Title: ");
            var title = Console.ReadLine();
            projectUpdateForm.Title = !string.IsNullOrWhiteSpace(title) ? title : result.Title;


            Console.Write("Description: ");
            var description = Console.ReadLine();
            projectUpdateForm.Description = !string.IsNullOrWhiteSpace(description) ? description : result.Description;


            Console.Write("Start Date (yyyy-MM-dd): ");//Chat GPT
            var startDate = Console.ReadLine();
            if (!string.IsNullOrWhiteSpace(startDate) && DateTime.TryParse(startDate, out DateTime parsedStartDate) && parsedStartDate != result.StartDate)
                projectUpdateForm.StartDate = parsedStartDate;
            else
                projectUpdateForm.StartDate = result.StartDate;  // Keep current value

            Console.Write("End Date (yyyy-MM-dd): ");//Chat GPT
            var endDate = Console.ReadLine();
            if (!string.IsNullOrWhiteSpace(endDate) && DateTime.TryParse(endDate, out DateTime parsedEndDate) && parsedEndDate != result.EndDate)
                projectUpdateForm.EndDate = parsedEndDate;
            else
                projectUpdateForm.EndDate = result.EndDate;  // Keep current value

            Console.Write("Status (Not Started, Ongoing, Finished): ");
            var status = Console.ReadLine();
            projectUpdateForm.Status = !string.IsNullOrWhiteSpace(status) ? status : result.Status;


            Console.Write("Project Manager (First Name): ");
            var userFirstName = Console.ReadLine();
            projectUpdateForm.UserFirstName = !string.IsNullOrWhiteSpace(userFirstName) ? userFirstName : result.UserFirstName;


            Console.Write("Project Manager (Last Name): ");
            var userLastName = Console.ReadLine();
            projectUpdateForm.UserLastName = !string.IsNullOrWhiteSpace(userLastName) ? userLastName : result.UserLastName;


            Console.Write("Customer: ");
            var customer = Console.ReadLine();
            projectUpdateForm.Customer = !string.IsNullOrWhiteSpace(customer) ? customer : result.Customer;


            Console.Write("Product: ");
            var product = Console.ReadLine();
            projectUpdateForm.ProductName = !string.IsNullOrWhiteSpace(product) ? product : result.ProductName;

            Console.Write("Price: ");
            var price = Console.ReadLine();
            if (!string.IsNullOrWhiteSpace(price) && decimal.TryParse(price, out decimal parsedPrice) && parsedPrice != result.ProductPrice)
                projectUpdateForm.ProductPrice = parsedPrice;
            else
                projectUpdateForm.ProductPrice = result.ProductPrice;  // Keep current price

            Console.WriteLine("-----------------------------------");


            var updatedProject = await _projectService.UpdateProjectAsync(result.Id, projectUpdateForm);

            if (updatedProject != null)
            {
                Console.WriteLine($"Project updated successfully!");
                Console.WriteLine();
                Console.WriteLine($"ID: {projectUpdateForm.Id}");
                Console.WriteLine($"Title: {projectUpdateForm.Title}");
                Console.WriteLine($"Description: {projectUpdateForm.Description}");
                Console.WriteLine($"Time Period: {projectUpdateForm.StartDate} - {projectUpdateForm.EndDate}");
                Console.WriteLine($"Status: {projectUpdateForm.Status}");
                Console.WriteLine($"Project Manager: {projectUpdateForm.UserFirstName} {projectUpdateForm.UserLastName}");
                Console.WriteLine($"Customer: {projectUpdateForm.Customer}");
                Console.WriteLine($"Product: {projectUpdateForm.ProductName}");
                Console.WriteLine($"Price: {projectUpdateForm.ProductPrice}");
            }
            else
            {
                Console.WriteLine("Something went wrong! Project update failed.");
            }

            Console.ReadKey();
        }


    }


    public async Task DeleteProjectOption()
    {
        Console.Clear();
        Console.WriteLine("### DELETE PROJECT ###");
        Console.WriteLine();

        Console.Write("Project Title: ");
        var selectedTitle = Console.ReadLine()!;

        var result = await _projectService.GetProjectAsync(p => p.Title == selectedTitle);
        if (!result.Success)
        {
            Console.WriteLine("Project was not found");
        }
        else
        {
            Console.Write($"Do you want to delete project '{selectedTitle}' ? (y/n): ");
            var option = Console.ReadLine()!;
            if (option.Equals("y", StringComparison.CurrentCultureIgnoreCase))
            {
                var project = ((Result<Project>)result).Data;  // Access the project from the result
                await _projectService.DeleteProjectAsync(project!.Id);  // Use the project's Id
                await _projectRepository.SaveAsync();
                Console.WriteLine($"Project '{project.Title}' was deleted successfully");
            }
            
            
        }

        Console.ReadKey();
    }

    

    public void CloseApplicationOption()
    {
        Console.Clear();
        Console.Write("Do you want to exit this program? (y/n): ");
        var option = Console.ReadLine()!;

        if (option.Equals("y", StringComparison.CurrentCultureIgnoreCase))
        {
            Environment.Exit(0);
        }
    }


    public async Task MenuOptions()
    {
        while (true)
        {
            Console.Clear();
            Console.WriteLine("### MENU OPTIONS ###");
            Console.WriteLine("-------------------------------");
            Console.WriteLine("1. CREATE NEW PROJECT");
            Console.WriteLine("-------------------------------");
            Console.WriteLine("2. VIEW ALL PROJECTS");
            Console.WriteLine("-------------------------------");
            Console.WriteLine("3. VIEW A PROJECT");
            Console.WriteLine("-------------------------------");
            Console.WriteLine("4. UPDATE PROJECT");
            Console.WriteLine("-------------------------------");
            Console.WriteLine("5. DELETE PROJECT");
            Console.WriteLine("-------------------------------");
            Console.WriteLine("6. CLOSE APPLICATION");
            Console.WriteLine("-------------------------------");
            Console.Write("SELECTED MENU OPTION: ");

            var option = Console.ReadLine();

            switch (option)
            {
                case "1":
                    await CreateProjectOption();
                    break;

                case "2":
                    await ViewAllProjectsOption();
                    break;

                case "3":
                    await ViewProjectOption();
                    break;

                case "4":
                    await UpdateProjectOption();
                    break;

                case "5":
                    await DeleteProjectOption();
                    break;

                case "6":
                    CloseApplicationOption();
                    break;

            }




        }

    }
}

